{"version":3,"sources":["SearchBar.js","AddressList.js","App.js","serviceWorker.js","index.js"],"names":["API_SUGGESTIONS_URL","API_RESULTS_URL","LANGUAGE","CATEGORIES","FIELDS","FORMAT","library","add","faSearch","AsyncTypeahead","asyncContainer","Typeahead","SearchBar","state","isLoading","query","options","results","getSuggestions","_this","setState","axios","get","params","countryCode","category","f","text","then","res","searchResult","data","suggestions","getResults","langCode","outFields","SingleLine","candidates","props","onResult","onFormSubmit","e","preventDefault","_this2","this","react_default","a","createElement","Form","className","onSubmit","placeholder","onChange","selected","length","onInputChange","value","onSearch","labelKey","option","Button","variant","onClick","react_fontawesome_index_es","icon","React","Component","List","listItems","listAddresses","map","address","i","Row_default","key","Col_default","md","span","offset","attributes","Place_addr","Container_default","AddressList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","undefined","addressList","faGlobe","App","addresses","handleOnResult","resultValues","src_SearchBar_0","src_AddressList_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ff0c5eb0.chunk.js","sourcesContent":["import React from \"react\";\nimport './SearchBar.css';\nimport { Form, Button } from 'react-bootstrap';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\nimport { asyncContainer, Typeahead } from 'react-bootstrap-typeahead';\nimport axios from 'axios';\nconst API_SUGGESTIONS_URL = 'https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/suggest';\nconst API_RESULTS_URL = 'https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/findAddressCandidates';\nconst LANGUAGE = 'bg';\nconst CATEGORIES= 'POI,Address'\nconst FIELDS =\"Place_addr\";\nconst FORMAT = 'pjson'\nlibrary.add(faSearch);\n\nconst AsyncTypeahead = asyncContainer(Typeahead);\n\nclass SearchBar extends React.Component {\n  \n  state = {\n    isLoading: false,\n    query: '',\n    options: [],\n    results: [],\n  }\n  getSuggestions = (query) => {\n    this.setState({isLoading: true});\n    axios.get(API_SUGGESTIONS_URL,\n      {\n        params: {\n          countryCode: LANGUAGE,\n          category: CATEGORIES,\n          f: FORMAT,\n          text: query\n        }\n      })\n      .then(res => {\n        const searchResult = res.data;\n        this.setState({isLoading: false, options: searchResult.suggestions });\n      })\n  }\n  getResults = () => {\n    axios.get(API_RESULTS_URL,\n      {\n        params: {\n          countryCode: LANGUAGE,\n          langCode: LANGUAGE,\n          category: CATEGORIES,\n          outFields : FIELDS,\n          f: FORMAT,\n          SingleLine: this.state.query\n        }\n      })\n      .then(res => {\n        const searchResult = res.data;\n        this.setState({\n          results: searchResult.candidates\n        });\n        this.props.onResult(searchResult.candidates);\n      })\n  }\n\n  onFormSubmit = e => {\n    e.preventDefault();\n    this.getResults();\n  }\n\n  render() {\n    return (\n      <Form className=\"SearchBar\" onSubmit={this.onFormSubmit}>\n        <AsyncTypeahead\n          className=\"mr-sm-2 asynctypeahead-flex\"\n          placeholder=\"Search\" \n          isLoading={this.state.isLoading}\n          onChange={(selected) => {\n            if (selected.length > 0)\n              this.setState({\n                query: selected[0].text\n              });\n          }}\n          onInputChange={value => {\n            this.setState({\n              query: value\n            });\n          }}\n          onSearch={query => {\n            this.getSuggestions(query);\n          }}\n          labelKey={option => option.text}\n          options={this.state.options}> \n        </AsyncTypeahead>\n        <Button variant=\"primary\" onClick={this.onFormSubmit}>\n            <FontAwesomeIcon icon=\"search\" />\n        </Button>\n      </Form>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React    from \"react\";\nimport './AddressList.css';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport \"isomorphic-fetch\"\nclass AddressList extends React.Component {\n \n  constructor(props) {\n    super(props);\n    this.state = {\n      address:[],\n    }\n   \n  }\n  componentDidMount(){\n    if(this.props.addressList!== undefined)\n    this.setState({address : this.props.addressList});\n  }\n  componentWillReceiveProps(props){\n    if (props.addressList !== this.state.address) {\n      this.setState({ address: props.addressList });\n    }\n  }\n \n  render() {\n    return (\n      <List listAddresses={this.state.address}/>\n    );\n  }\n}\n\nfunction List(props){\n  const listAddresses = props.listAddresses;\n  const listItems = listAddresses.map((address,i) => \n      <Row key={i}>\n          <Col className=\"list-item\" md={{ span: 6, offset: 3 }}><p>{address.attributes.Place_addr}</p></Col>\n      </Row>\n  );\n  return (\n    <Container>\n      {listItems}\n    </Container>\n  );\n}\n\nexport default AddressList;\n\n\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport  SearchBar from './SearchBar'\nimport  AddressList from './AddressList'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGlobe } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faGlobe)\nclass App extends Component {\n  state = {\n    addresses:[]\n  }\n  handleOnResult = (resultValues) => {\n    this.setState({addresses: resultValues});\n  }\n \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <FontAwesomeIcon icon=\"globe\" />\n        <p>Search for an address</p>\n        <SearchBar onResult={this.handleOnResult}/>\n        </header>\n        <AddressList  addressList={this.state.addresses}/>\n       \n              \n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}